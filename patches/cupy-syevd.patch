diff --git a/cupy/linalg/_eigenvalue.py b/cupy/linalg/_eigenvalue.py
index 37d6bbc3b..67619775a 100644
--- a/cupy/linalg/_eigenvalue.py
+++ b/cupy/linalg/_eigenvalue.py
@@ -134,7 +134,7 @@ def eigh(a, UPLO='L'):
         v = cupy.empty(a.shape, v_dtype)
         return w, v
 
-    if a.ndim > 2 or runtime.is_hip:
+    if a.ndim > 2:
         w, v = cupyx.cusolver.syevj(a, UPLO, True)
         return w, v
     else:
diff --git a/cupy_backends/hip/cupy_rocsolver.h b/cupy_backends/hip/cupy_rocsolver.h
index 77039e991..b3f19f035 100644
--- a/cupy_backends/hip/cupy_rocsolver.h
+++ b/cupy_backends/hip/cupy_rocsolver.h
@@ -1962,36 +1962,136 @@ cusolverStatus_t cusolverDnSHgels(...) {
     return rocblas_status_not_implemented;
 }
 
-cusolverStatus_t cusolverDnSsyevd_bufferSize(...) {
-    return rocblas_status_not_implemented;
+cusolverStatus_t cusolverDnSsyevd_bufferSize(cusolverDnHandle_t handle,
+                                             cusolverEigMode_t jobz,
+                                             cublasFillMode_t uplo,
+                                             int n,
+                                             const float *A,
+                                             int lda,
+                                             const float *W,
+                                             int *lwork) {
+    // rocSOLVER does not need extra workspace, but it needs to allocate memory for storing
+    // the tridiagonal matrix T associated with A, which we don't need, so we use this workspace
+    // to store it
+    *lwork = n;  // note: counts, not bytes!
+    return rocblas_status_success;
 }
 
-cusolverStatus_t cusolverDnDsyevd_bufferSize(...) {
-    return rocblas_status_not_implemented;
+cusolverStatus_t cusolverDnDsyevd_bufferSize(cusolverDnHandle_t handle,
+                                             cusolverEigMode_t jobz,
+                                             cublasFillMode_t uplo,
+                                             int n,
+                                             const double *A,
+                                             int lda,
+                                             const double *W,
+                                             int *lwork) {
+    // rocSOLVER does not need extra workspace, but it needs to allocate memory for storing
+    // the tridiagonal matrix T associated with A, which we don't need, so we use this workspace
+    // to store it
+    *lwork = n;  // note: counts, not bytes!
+    return rocblas_status_success;
 }
 
-cusolverStatus_t cusolverDnCheevd_bufferSize(...) {
-    return rocblas_status_not_implemented;
+cusolverStatus_t cusolverDnCheevd_bufferSize(cusolverDnHandle_t handle,
+                                             cusolverEigMode_t jobz,
+                                             cublasFillMode_t uplo,
+                                             int n,
+                                             const cuComplex *A,
+                                             int lda,
+                                             const float *W,
+                                             int *lwork) {
+    // rocSOLVER does not need extra workspace, but it needs to allocate memory for storing
+    // the tridiagonal matrix T associated with A, which we don't need, so we use this workspace
+    // to store it
+    *lwork = n;  // note: counts, not bytes!
+    return rocblas_status_success;
 }
 
-cusolverStatus_t cusolverDnZheevd_bufferSize(...) {
-    return rocblas_status_not_implemented;
+cusolverStatus_t cusolverDnZheevd_bufferSize(cusolverDnHandle_t handle,
+                                             cusolverEigMode_t jobz,
+                                             cublasFillMode_t uplo,
+                                             int n,
+                                             const cuDoubleComplex *A,
+                                             int lda,
+                                             const double *W,
+                                             int *lwork) {
+    // rocSOLVER does not need extra workspace, but it needs to allocate memory for storing
+    // the tridiagonal matrix T associated with A, which we don't need, so we use this workspace
+    // to store it
+    *lwork = n;  // note: counts, not bytes!
+    return rocblas_status_success;
 }
 
-cusolverStatus_t cusolverDnSsyevd(...) {
-    return rocblas_status_not_implemented;
+cusolverStatus_t cusolverDnSsyevd(cusolverDnHandle_t handle,
+                                  cusolverEigMode_t jobz,
+                                  cublasFillMode_t uplo,
+                                  int n,
+                                  float *A,
+                                  int lda,
+                                  float *D,
+                                  float *W,
+                                  int lwork,
+                                  int *info) {
+    return rocsolver_ssyevd(handle, convert_rocblas_evect(jobz), convert_rocblas_fill(uplo),
+                           n, A, lda, D,
+                           // since we can't pass in another array through the API, and work is unused,
+                           // we use it to store the temporary E array, to be discarded after calculation
+                           W,
+                           info);
 }
 
-cusolverStatus_t cusolverDnDsyevd(...) {
-    return rocblas_status_not_implemented;
+cusolverStatus_t cusolverDnDsyevd(cusolverDnHandle_t handle,
+                                  cusolverEigMode_t jobz,
+                                  cublasFillMode_t uplo,
+                                  int n,
+                                  double *A,
+                                  int lda,
+                                  double *D,
+                                  double *W,
+                                  int lwork,
+                                  int *info) {
+    return rocsolver_dsyevd(handle, convert_rocblas_evect(jobz), convert_rocblas_fill(uplo),
+                           n, A, lda, D,
+                           // since we can't pass in another array through the API, and work is unused,
+                           // we use it to store the temporary E array, to be discarded after calculation
+                           W,
+                           info);
 }
 
-cusolverStatus_t cusolverDnCheevd(...) {
-    return rocblas_status_not_implemented;
+cusolverStatus_t cusolverDnCheevd(cusolverDnHandle_t handle,
+                                  cusolverEigMode_t jobz,
+                                  cublasFillMode_t uplo,
+                                  int n,
+                                  cuComplex *A,
+                                  int lda,
+                                  float *D,
+                                  cuComplex *W,
+                                  int lwork,
+                                  int *info) {
+    return rocsolver_cheevd(handle, convert_rocblas_evect(jobz), convert_rocblas_fill(uplo),
+                           n, reinterpret_cast<rocblas_float_complex*>(A) , lda, D,
+                           // since we can't pass in another array through the API, and work is unused,
+                           // we use it to store the temporary E array, to be discarded after calculation
+                           reinterpret_cast<float*>(W),
+                           info);
 }
 
-cusolverStatus_t cusolverDnZheevd(...) {
-    return rocblas_status_not_implemented;
+cusolverStatus_t cusolverDnZheevd(cusolverDnHandle_t handle,
+                                  cusolverEigMode_t jobz,
+                                  cublasFillMode_t uplo,
+                                  int n,
+                                  cuDoubleComplex *A,
+                                  int lda,
+                                  double *D,
+                                  cuDoubleComplex *W,
+                                  int lwork,
+                                  int *info) {
+    return rocsolver_zheevd(handle, convert_rocblas_evect(jobz), convert_rocblas_fill(uplo),
+                           n,reinterpret_cast<rocblas_double_complex*>(A) , lda, D,
+                           // since we can't pass in another array through the API, and work is unused,
+                           // we use it to store the temporary E array, to be discarded after calculation
+                           reinterpret_cast<double*>(W),
+                           info);
 }
 
 cusolverStatus_t cusolverDnXsyevjSetTolerance(...) {
